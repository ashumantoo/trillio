.logo {
  height: 3.25rem;
  margin-left: 3rem;
}

.search {
  //1st 0 --> doesn't want it to grow to fill all the available space
  //2nd 0 --> We don't want to shrink
  //3rd 40% --> And we want to occupy the 40% of the header element
  flex: 0 0 40%;
  display: flex;
  align-items: center;
  justify-content: center;

  @media only screen and (max-width:$bp-smallest) {
    order: 1;
    flex: 0 0 100%;
    background-color: var(--color-Grey-light-2);
  }

  &__input {
    font-family: inherit;
    font-size: inherit;
    color: inherit;
    background-color: var(--color-Grey-light-2);
    border: none;
    padding: 0.7rem 2rem;
    border-radius: 100px;
    width: 90%;
    //This -ve margin will move the button inside the search input
    margin-right: -3.25rem;
    transition: all .2s;

    &:focus {
      outline: none;
      width: 100%;
      background-color: var(--color-Grey-light-3);
    }

    &::-webkit-input-placeholder {
      font-weight: 100;
      color: var(--color-Grey-light-4);
    }
  }

  &__input:focus+&__button {
    background-color: var(--color-Grey-light-3);
  }

  &__button {
    border: none;
    background-color: var(--color-Grey-light-2);

    &:focus {
      outline: none;
    }

    &:active {
      transform: translateX(2px);
    }
  }

  &__icon {
    height: 2rem;
    width: 2rem;
    stroke: var(--color-Grey-light-4);
  }
}

.user-nav {
  display: flex;
  align-items: center;
  //the parent of this element is also a flex contianer and there we have vertically alined all the item center,
  //but for this user-nav we don't want to align this vertically center so to override this we have used align-self: stretch
  align-self: stretch;

  //All direct children of user-nav element
  &>* {
    padding: 0 2rem;
    cursor: pointer;
    height: 100%;
    display: flex;
    align-items: center;
  }

  &>*:hover {
    background-color: var(--color-Grey-light-2);
    height: 100%;
  }

  &__icon-box {
    position: relative;
  }

  &__icon {
    width: 2.25rem;
    height: 2.25rem;
    stroke: var(--color-Grey-light-2);
  }

  &__notification {
    font-size: 0.8rem;
    height: 1.75rem;
    width: 1.75rem;
    border-radius: 50%;
    background-color: var(--color-primary);
    color: #fff;

    position: absolute;
    top: 1.5rem;
    right: 1.1rem;

    // This have been used to center the text inside the notification badge vertically and horizontally
    display: flex;
    justify-content: center;
    align-items: center;
  }

  &__user-photo {
    height: 3.35rem;
    border-radius: 50%;
    margin-right: 2rem;
  }
}

.side-nav {
  font-size: 1.4rem;
  list-style: none;
  margin-top: 3.5rem;

  @media only screen and (max-width:$bp-medium) {
    display: flex;
    margin: 0;
  }

  &__item {
    position: relative;

    &:not(:last-child) {
      margin-bottom: .5rem;

      @media only screen and (max-width:$bp-medium) {
        margin-bottom: 0;
      }
    }

    @media only screen and (max-width:$bp-medium) {
      //NOTE:This will allow all flex items to take equeal width inside all the avialble space/width
      flex: 1;
    }
  }

  //Animation of side nav on hover start here
  &__item::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 3px;
    background-color: var(--color-primary);
    transform: scaleY(0);
    //setting animation at different properties of the element with delay and cubic-bezier(bezier curve)
    transition: transform .2s,
      width .4s cubic-bezier(1, 0, 0, 1) .2s,
      background-color .1s;
  }

  &__item:hover::before,
  &__item--active::before {
    transform: scaleY(1);
    width: 100%;
  }

  &__item:active::before {
    background-color: var(--color-primary-light);
  }

  //Animation of side nav on hove end here

  &__link:link,
  &__link:visited {
    color: var(--color-Grey-light-1);
    text-decoration: none;
    text-transform: uppercase;
    display: inline-block;
    padding: 1.5rem 3rem;
    position: relative;
    //z-index only works if we have defined the position property otherwise it will not work
    z-index: 10%;

    display: flex;
    align-items: center;

    @media only screen and (max-width:$bp-medium) {
      justify-content: center;
      padding: 2rem;
    }

    @media only screen and (max-width:$bp-small) {
      flex-direction: column;
      padding: 1.5rem .5rem;
    }
  }

  &__icon {
    width: 1.75rem;
    width: 1.75rem;
    margin-right: 2rem;
    //color value of currentColor will the color of the current element or the color of the parent element
    fill: currentColor;

    @media only screen and (max-width:$bp-small) {
      margin-right: 0;
      width: 1.5rem;
      height: 1.5rem;
      margin-bottom: .5rem;
    }
  }
}

.legal {
  font-size: 1.2rem;
  text-align: center;
  color: var(--color-Grey-light-4);
  padding: 2.5rem;

  @media only screen and (max-width:$bp-medium) {
    display: none;
  }
}

.gallery {
  display: flex;

  &__item {}

  &__photo {
    width: 100%;
    display: block;
  }
}


.overview {
  display: flex;
  align-items: center;
  border-bottom: 1px solid var(--color-Grey-light-2);

  &__heading {
    font-size: 2.5rem;
    font-weight: 300;
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: 1.5rem 3rem;

    @media only screen and (max-width:$bp-small) {
      font-size: 1.8rem;
      padding: 1.25rem 2rem;
    }
  }

  &__stars {
    //this code used to create the space between rating and the location element
    //This is very important technique ****
    margin-right: auto;
    display: flex;
  }

  &__icon-star,
  &__icon-location {
    height: 1.75rem;
    width: 1.75rem;
    fill: var(--color-primary);
  }

  &__location {
    font-size: 1.2rem;
    display: flex;
    align-items: center;
  }

  &__icon-location {
    margin-right: .5rem;
  }

  &__rating {
    background-color: var(--color-primary);
    color: #fff;
    margin-left: 3rem;
    padding: 0 2.25rem;
    //the parent of this element is a flex contianer and there we have vertically alined all the item center,
    //but for this user-nav we don't want to align this vertically center instead we want it to stretch over all the 
    //avialable space vertically so to override this we have used align-self: stretch
    align-self: stretch;

    //This will center the item vertically and horizontally, but this will creates one problem that it will place the
    //the items side by side - and this is the default behaviour of flex box, to solve this issue we will use flex-direction property to column
    display: flex;
    align-items: center;
    justify-content: center;

    flex-direction: column;

    @media only screen and (max-width:$bp-small) {
      padding: 0 1.5rem;
    }
  }

  &__rating-average {
    font-size: 2.25rem;
    font-weight: 300;
    margin-bottom: -3px;

    @media only screen and (max-width:$bp-small) {
      font-size: 1.8rem;
    }
  }

  &__rating-count {
    font-size: .8rem;
    text-transform: uppercase;

    @media only screen and (max-width:$bp-small) {
      font-size: .5rem;
    }
  }
}


.btn-inline {
  border: none;
  color: var(--color-primary);
  font-size: inherit;
  border-bottom: 1px solid currentColor;
  padding-bottom: 2px;
  display: inline-block;
  background-color: transparent;
  cursor: pointer;
  transition: all .2s;

  & span {
    margin-left: 3px;
    transition: margin-left .2s;
  }

  &:hover {
    color: var(--color-Grey-dark-1);

    span {
      margin-left: 8px;
    }
  }

  &:focus {
    outline: none;
    //as long as the button is focus, this animation will run for infinte time
    animation: pulsate 1s infinite;
  }
}

@keyframes pulsate {
  0% {
    transform: scale(1);
    box-sizing: none;
  }

  50% {
    transform: scale(1.05);
    box-shadow: 0 1rem 4rem rgba(0, 0, 0, .25);
  }

  100% {
    transform: scale(1);
    box-sizing: none;
  }
}

.paragraph:not(:last-of-type) {
  margin-bottom: 2rem;
}

.list {
  list-style: none;
  margin: 3rem 0;
  padding: 3rem 0;
  border-top: 1px solid var(--color-Grey-light-3);
  border-bottom: 1px solid var(--color-Grey-light-3);

  display: flex;
  //controls wheather the text should be in single line or multiple line
  flex-wrap: wrap;

  &__item {
    flex: 0 0 50%;
    margin-bottom: .7rem;
  }

  &__item::before {
    content: "";
    display: inline-block;
    height: 1rem;
    width: 1rem;

    //older browser - since we are using svg in css, we can not change the color to the svg icon
    // background-image: url(../img/chevron-thin-right.svg);
    // background-size: cover;

    //NOTE: Newer browser - we can use masks - Its define a area where we can look through the element and see what's behind the element.
    background-color: var(--color-primary);
    mask-image: url(../img/chevron-thin-right.svg);
    mask-size: cover;
  }
}

.recommend {
  font-size: 1.3rem;
  color: var(--color-Grey-dark-3);

  display: flex;
  align-items: center;

  &__count {
    margin-right: auto;
  }

  &__friends {
    display: flex;
  }

  &__photo {
    box-sizing: content-box;
    height: 4rem;
    width: 4rem;
    border-radius: 50%;
    border: 3px solid #fff;

    &:not(:last-child) {
      margin-right: -1.5rem;
    }
  }
}

.review {
  background-color: #fff;
  padding: 3rem;
  box-shadow: var(--light-shadow);
  margin-bottom: 3.5rem;
  position: relative;
  overflow: hidden;

  @media only screen and (max-width:$bp-medium) {
    padding: 2rem;
    margin-bottom: 3rem;
  }

  &__text {
    //NOTE:z-index only works if we have set position property on the element
    margin-bottom: 2rem;
    z-index: 10;
    position: relative;
  }

  &__user {
    display: flex;
    align-items: center;
  }

  &__photo {
    height: 4.5rem;
    width: 4.5rem;
    border-radius: 50%;
    margin-right: 1.5rem;
  }

  &__user-box {
    // flex: 0 0 65%;
    margin-right: auto;
  }

  &__user-name {
    font-size: 1.1rem;
    font-weight: 600;
    text-transform: uppercase;
    margin-bottom: .4rem;
  }

  &__user-date {
    font-size: 1rem;
    color: var(--color-Grey-dark-3);
  }

  &__rating {
    color: var(--color-primary);
    font-size: 2.4rem;
    font-weight: 300;
  }

  &::before {
    //quote html entity code
    content: "\201C";
    position: absolute;
    top: -2.75rem;
    left: -1rem;
    font-size: 20rem;
    line-height: 1;
    color: var(--color-Grey-light-2);
    font-family: sans-serif;
    z-index: 1;
  }
}

.cta {
  padding: 3.5rem 0;
  text-align: center;

  @media only screen and (max-width:$bp-medium) {
    padding: 2.5rem 0;
  }

  &__book-now {
    font-size: 1.5rem;
    font-weight: 300;
    text-transform: uppercase;
    margin-bottom: 2.5rem;
  }
}

.btn {
  font-size: 1.5rem;
  font-weight: 300;
  text-transform: uppercase;
  border-radius: 100px;
  border: none;
  background-image: linear-gradient(to right, var(--color-primary-light), var(--color-primary-dark));
  color: #fff;
  position: relative;
  //This to hide the other text on the button "ONLY 4 ROOMS LEFT", since initially it is not in the flow, that why it is overflowing and we can hide it by overflow:hidden
  overflow: hidden;
  cursor: pointer;

  &>* {
    height: 100%;
    width: 100%;
    display: inline-block;
    transition: all .2s;
  }

  &__visible {
    padding: 2rem 7.5rem;
  }

  &__invisible {
    display: inline-block;
    position: absolute;
    padding: 2rem 0;
    height: 100%;
    width: 100%;
    left: 0;
    //moving element to out of the flow
    top: -100%;
  }

  &:hover {
    background-image: linear-gradient(to left, var(--color-primary-light), var(--color-primary-dark));
  }

  &:hover &__visible {
    transform: translateY(100%);
  }

  &:hover &__invisible {
    top: 0;
  }

  &:focus {
    outline: none;
    animation: pulsate 1s infinite;
  }
}